services:
  nginx:
    image: nginx:1.25-alpine
    container_name: django_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - media_data:/var/www/media:ro
      - static_data:/var/www/static:ro
      # Uncomment for SSL certificates
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - django
    networks:
      - django_network

  django:
    build:
      context: .
      args:
        PYTHON_VERSION: "${PYTHON_VERSION}"
        REQUIREMENTS_FILE: "${REQUIREMENTS_FILE}"
    container_name: django_web
    restart: unless-stopped
    command: gunicorn project.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 60
    volumes:
      - static_data:/var/www/static:rw
      - media_data:/var/www/media:rw
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      - DEBUG=False
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - django_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:16-alpine
    container_name: django_postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME:-postgres}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    expose:
      - "5432"
    networks:
      - django_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_broker
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    networks:
      - django_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  celery_worker:
    build: .
    container_name: django_celery_worker
    restart: unless-stopped
    command: celery -A project worker --loglevel=info
    volumes:
      - media_data:/var/www/media:rw
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - django_network

  celery_beat:
    build: .
    container_name: django_celery_beat
    restart: unless-stopped
    command: celery -A project beat --loglevel=info
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - django_network

volumes:
  postgres_data:
  redis_data:
  media_data:
  static_data:

networks:
  django_network:
    driver: bridge
